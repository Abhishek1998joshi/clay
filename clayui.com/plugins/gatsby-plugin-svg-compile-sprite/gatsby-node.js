/**
 * SPDX-FileCopyrightText: Â© 2018 Liferay, Inc. <https://liferay.com>
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Compiles SVG icons in directory `clay-css/src/images/icons` into
// `static/images/icons/icons.svg` spritemap. This also autogenerates
// `static/js/flags-autogenerated.json` and `static/js/icons-autogenerated.json`
// used for search in `icons.html`.

const fs = require('fs');
const path = require('path');

const aliases = require('./clay-icon-aliases');

const buildJson = (arr, aliasesMap) => {
	let json = '[\n';

	for (let i = 0; i < arr.length; i++) {
		let aliases = aliasesMap[arr[i]];

		json += '    {\n';
		json += `        "name": "${arr[i]}",\n`;
		json += '        "aliases": [';

		if (!aliases) {
			aliases = '""';
		}

		json += `${aliases}]\n`;

		if (i === arr.length - 1) {
			json += '    }\n';
		} else {
			json += '    },\n';
		}
	}

	json += ']';

	return json;
};

const generateFiles = (pluginOptions) => {
	const REGEX_FILE_EXT_SVG = /(?:flags-|\.svg$)/g;
	const REGEX_HTML_COMMENTS = /<!--(?:.+?)-->\n?/gs;
	const REGEX_SVG_TAG = /(?:<\/svg|<svg[^>]+)>(?:\n|)/g;
	const REGEX_SVG_VIEWBOX = /\bviewBox="[^"]+"/g;

	const filesArr = fs.readdirSync(pluginOptions.srcDir);

	const flagIconsArr = [];
	const svgIconsArr = [];

	let strSprite = `<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">`;

	filesArr.forEach((file) => {
		let icon = fs
			.readFileSync(path.join(pluginOptions.srcDir, file), 'utf8')
			.toString();

		const id = file.replace(REGEX_FILE_EXT_SVG, '').toLowerCase();

		const viewBox = icon.match(REGEX_SVG_VIEWBOX);

		try {
			if (!viewBox) {
				throw `Viewbox attribute not found for icon: ${id}`;
			}
		} catch (err) {
			console.warn(err);
		}

		const symbol = `<symbol id="${id}" ${viewBox}>`;

		icon = icon.replace(REGEX_HTML_COMMENTS, '');
		icon = icon.replace(REGEX_SVG_TAG, '');

		strSprite += `${symbol}${icon}</symbol>`;

		// For autogenerate files

		if (aliases.flagsData[id]) {
			flagIconsArr.push(id);
		} else {
			svgIconsArr.push(id);
		}
	});

	strSprite += '</svg>';

	fs.writeFileSync(
		path.join(pluginOptions.staticDir, 'images', 'icons', 'icons.svg'),
		strSprite
	);

	fs.writeFileSync(
		path.join(pluginOptions.staticDir, 'js', 'flags-autogenerated.json'),
		buildJson(flagIconsArr, aliases.flagsData)
	);

	fs.writeFileSync(
		path.join(pluginOptions.staticDir, 'js', 'icons-autogenerated.json'),
		buildJson(svgIconsArr, aliases.iconsData)
	);
};

exports.onPostBootstrap = ({reporter}, pluginOptions) => {
	generateFiles(pluginOptions);

	reporter.info(`Compiling icons.svg finished`);
};

exports.onCreateDevServer = ({reporter}, pluginOptions) => {
	const MESSAGE = `Compiling icons.svg finished: Refresh the page!`;

	const watcher = require('chokidar').watch(pluginOptions.srcDir);

	watcher.on(`ready`, () => {
		watcher
			.on(`add`, () => {
				generateFiles(pluginOptions);

				reporter.info(MESSAGE);
			})
			.on(`change`, () => {
				generateFiles(pluginOptions);

				reporter.info(MESSAGE);
			})
			.on(`unlink`, () => {
				generateFiles(pluginOptions);

				reporter.info(MESSAGE);
			});
	});
};
