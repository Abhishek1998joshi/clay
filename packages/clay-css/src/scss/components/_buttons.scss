.btn {
	@include clay-button-variant($btn);
}

fieldset:disabled a.btn {
	$btn-disabled: setter(map-get($btn, disabled), ());

	@include clay-css($btn-disabled);

	&:focus {
		@include clay-css(setter(map-get($btn-disabled, focus), ()));
	}

	&:active {
		@include clay-css(setter(map-get($btn-disabled, active), ()));
	}
}

// Button Sizes

@each $size, $value in $btn-sizes {
	$placeholder: if(
		starts-with($size, 'btn-'),
		'%clay-#{$size}',
		'%#{str-slice($size, 2)}'
	);

	$selector: if(
		starts-with($size, 'btn-'),
		clay-str-replace($size, 'btn-', '.btn-'),
		$size
	);

	#{$placeholder} {
		@include clay-button-variant($value);
	}

	#{$selector} {
		@extend #{$placeholder} !optional;
	}
}

// Button Block

.btn-block {
	display: block;
	width: 100%;

	+ .btn-block {
		margin-top: $btn-block-spacing-y;
	}
}

// Specificity overrides

input[type='submit'],
input[type='reset'],
input[type='button'] {
	&.btn-block {
		width: 100%;
	}
}

// Button Unstyled

%btn-unstyled {
	@include clay-button-variant($btn-unstyled);
}

.btn-unstyled {
	@extend %btn-unstyled;
}

// Button Monospaced

@each $size, $value in $btn-monospaced-sizes {
	$placeholder: if(
		starts-with($size, 'btn-monospaced'),
		'%clay-#{$size}',
		'%#{str-slice($size, 2)}'
	);

	$selector: if(
		starts-with($size, 'btn-monospaced-'),
		clay-str-replace($size, 'btn-monospaced', '.btn-monospaced.btn'),
		if(
			$size == 'btn-monospaced',
			clay-str-replace($size, 'btn-monospaced', '.btn-monospaced'),
			$size
		)
	);

	#{$placeholder} {
		@include clay-button-variant($value);
	}

	#{$selector} {
		@extend #{$placeholder} !optional;
	}
}

// Button Variants

@each $color, $value in $btn-palette {
	%btn-#{$color} {
		@include clay-button-variant($value);
	}

	.btn-#{$color} {
		@extend %btn-#{$color} !optional;
	}

	%btn-#{$color}-focus {
		background-color: map-get($value, focus-bg);
		border-color: map-get($value, focus-border-color);
		box-shadow: map-get($value, focus-box-shadow);
		color: map-get($value, focus-color);
	}
}

// Button Outline Variants

@each $color, $value in $btn-outline-palette {
	%btn-outline-#{$color} {
		@include clay-button-variant($value);
	}

	.btn-outline-#{$color} {
		@extend %btn-outline-#{$color} !optional;
	}

	%btn-outline-#{$color}-focus {
		background-color: map-get($value, focus-bg);
		border-color: map-get($value, focus-border-color);
		box-shadow: map-get($value, focus-box-shadow);
		color: map-get($value, focus-color);
	}
}

.btn-outline-borderless {
	@include clay-button-variant($btn-outline-borderless);
}

.btn-outline-borderless:not(:disabled):not(.disabled):active {
	border-color: transparent;
}

.show > .btn-outline-borderless.dropdown-toggle {
	border-color: transparent;
}

// Loading Icons with Buttons

.btn .loading-animation {
	font-size: 1em;
	margin-top: $inline-item-lexicon-icon-margin-top;
}
